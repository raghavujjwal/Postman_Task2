# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose


# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
services:
  server:
    build:
      context: .
      target: final
      platforms:
        - "linux/amd64"
    ports:
      - 8080:8080
    depends_on:
      db:
        condition: service_healthy
    environment:
      # Add database connection environment variable if your app uses it
      DATABASE_URL: postgres://ujjwal:mysecretpassword@db:5432/recruit_portal

  db:
    image: postgres:15
    platform: linux/amd64
    restart: always
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./init:/docker-entrypoint-initdb.d
    environment:
      POSTGRES_DB: recruit_portal  # Changed to match your app
      POSTGRES_USER: ujjwal        # Changed to match your app
      POSTGRES_PASSWORD: secret
    expose:
      - 5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  db-data: